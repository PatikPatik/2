import os
import asyncio
import logging
from flask import Flask
from threading import Thread
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)
import nest_asyncio
import requests

nest_asyncio.apply()

TOKEN = os.environ.get("BOT_TOKEN") or "–¢–û–ö–ï–ù_–û–¢–°–Æ–î–ê_–ò–õ–ò_–û–¢_–¢–ï–ë–Ø"

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is alive!"

# –ö–Ω–æ–ø–∫–∏
keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
     InlineKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç", callback_data='buy')],
    [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='refer')],
    [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'balance':
        await query.edit_message_text("–í–∞—à –±–∞–ª–∞–Ω—Å: 0.001 BTC")
    elif query.data == 'buy':
        await query.edit_message_text("–•–µ—à—Ä–µ–π—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω! üöÄ")
    elif query.data == 'refer':
        await query.edit_message_text("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å! üë•")
    elif query.data == 'help':
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ @admin –¥–ª—è –ø–æ–º–æ—â–∏.")

# –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
async def telegram_bot():
    requests.get(f"https://api.telegram.org/bot{TOKEN}/deleteWebhook")

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))

    print("‚úÖ Telegram bot started")
    await application.run_polling()

# Flask-—Å–µ—Ä–≤–µ—Ä
def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == '__main__':
    Thread(target=run_flask).start()
    asyncio.get_event_loop().run_until_complete(telegram_bot())
