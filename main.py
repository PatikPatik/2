import asyncio
import logging
from flask import Flask
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import nest_asyncio

# üîß –¢–æ–∫–µ–Ω
TOKEN = '8190768971:AAGGSA5g-hUnrc34R8gOwwjfSez8BJ6Puz8'

# üåê Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

# üìã –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üî• –ù–æ–≤—ã–π start —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω!")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç", callback_data="buy")],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞.", reply_markup=reply_markup)

# ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "balance":
        await query.edit_message_text("–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.001 BTC")
    elif data == "buy":
        await query.edit_message_text("–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ö–µ—à—Ä–µ–π—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç ...")
    elif data == "invite":
        await query.edit_message_text("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 1% –æ—Ç –µ–≥–æ –¥–æ—Ö–æ–¥–∞.")
    elif data == "help":
        await query.edit_message_text("–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ Telegram bot started")
    await application.run_polling()

# üö™ –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞ –≤–º–µ—Å—Ç–µ
@app.route('/')
def index():
    return 'Bot is running!'

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    app.run(host='0.0.0.0', port=5000)
